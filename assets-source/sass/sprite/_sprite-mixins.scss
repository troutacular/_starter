$mq-base-font-size: 16px !default;

/**
 * @author Mike Street
 * @group Sprite
 */

/**
 *  Convert pixels to ems.
 *
 * @param integer $px 				Value to convert.
 * @param integer $base-font-size   ($mq-base-font-size) - `<body>` font size.
 *
 * @example scss
 *  $font-size-in-ems: mq-px2em(16px);
 *  p { font-size: mq-px2em(16px); }
 *
 * @requires $mq-base-font-size
 * @returns {Number}
 */
@function mq-px2em($px, $base-font-size: $mq-base-font-size) {
	@if unitless($px) {
		@warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
		@return mq-px2em($px + 0); // That may fail.
	}
	@else if unit($px) == em {
		@return $px;
	}
	@return ($px / $base-font-size) * 1em;
}

/**
 * Add class for <IE9 sprite fallback
 *
 * @group sprite
 * @type string
 */
$ie-sprite: '.lt-ie9' !default;

/**
 * Set the `$sprite` map.
 * @group sprite
 */
$sprite: map-get($sprite-icons, sprite) !default;

/**
 * Retrive an attributes value for a specific icon in the sprite map.
 *
 * @param string $icon  The name of the icon.
 * @param string $attr  The attribute you wish to retrieve (e.g. width).
 */
@function sprite-attr($icon, $attr) {
	$new-icon: map-get($sprite-icons, $icon);
	@if $new-icon == null {
		@warn "Can't find an icon with the name #{$icon}";
	}
	@return map-get($new-icon, $attr);
}


/**
 * Create a map with the specified icon of attributes.
 *
 * @param string $icon  The name of the icon.
 */
@function icon-attr($icon) {
	$attr: (
		width: sprite-attr($icon, width),
		height: sprite-attr($icon, height),
		x: sprite-attr($icon, backgroundX),
		y: sprite-attr($icon, backgroundY),
		padT: sprite-attr($icon, padT),
		padR: sprite-attr($icon, padR),
		padB: sprite-attr($icon, padB),
		padL: sprite-attr($icon, padL),
	);

	@return $attr;
}

// Assign the correct SVG background image and dimensions to the element.
%sprite {
	display: inline-block;
	background-image: map-get($sprite, svgPath);
	background-size: mq-px2em(map-get($sprite, width)) mq-px2em(map-get($sprite, height));
}
// Assign the correct PNG background image and dimensions to the element.
%ie-sprite {
	background-image: map-get($sprite, pngPath);
}

/**
 * Add a Sprite for IE support.
 *
 * @type  string $icon  The name of the icon.
 * @type  string $type  The properties wanted {
 * 					- `all` ensures the icon has the background, position and size.
 * 					- `size` is just for dimensions.
 * 					- `bg` just  applies the backgrounds to an element}.
 * 				}
 *
 * @usage
 * .class {
 * 	@include ie-sprite(arrow);
 * 	&:hover {
 * 		@include ie-sprite(arrowDown, bg)
 * 	}
 * }
 *
 * @example css - Output
 * .lt-ie9 .class {
 *	 background-image: url("../img/sprite.png");
 * }
 * .lt-ie9 .class {
 *	 width: 20px;
 *	 height: 20px;
 *	 background-position: -5px -5px;
 * }
 * .lt-ie9 .class:hover {
 *	 background-position: -36px -36px;
 * }
 */
@mixin ie-sprite($icon, $type: all) {
	$icon-map: icon-attr($icon);

	@if $ie-sprite {
		#{$ie-sprite} & {
			@if $type == all {
				// Shares the PNG background
				@extend %ie-sprite;
			}
			// Outputs dimensions of icon
			@if $type == all or $type == size {
				width: map-get($icon-map, width);
				height: map-get($icon-map, height);
			}
			// Outputs background position
			@if $type == all or $type == bg {
				background-position: (map-get($icon-map, x)) (map-get($icon-map, y));
			}
		}
	}
}

/**
 * Add an SVG sprite icon using em positioning, with a PNG icon for browsers with the `$ie-sprite` class using px positioning.
 *
 * @type  string $icon  The name of the icon.
 * @type  string $type  The properties wanted {
 * 					- `all` ensures the icon has the background, position and size.
 * 					- `size` is just for dimensions.
 * 					- `bg` just  applies the backgrounds to an element}.
 * 				}
 *
 * @usage
 * .class {
 * 	@include sprite(arrow);
 * 	&:hover {
 * 		@include sprite(arrowDown, bg)
 * 	}
 * }
 *
 * @example css - Output
 * .class {
 * 	display: inline-block;
 * 	background-image: url("../img/sprite.svg");
 * 	background-size: 34.25em 32.1875em;
 * }
 *
 * .lt-ie9 .class {
 * 	background-image: url("../img/sprite.png");
 * }
 *
 * .class {
 * 	width: 1.3125em;
 * 	height: 1.3125em;
 * 	background-position: -0.3125em -0.3125em;
 * }
 * .lt-ie9 .class {
 * 	width: 20px;
 * 	height: 20px;
 * 	background-position: -5px -5px;
 * }
 * .class:hover {
 * 	background-position: -2.25em -2.25em;
 * }
 * .lt-ie9 .class:hover {
 * 	background-position: -36px -36px;
 * }
 */
@mixin sprite($icon, $type: all) {
	@if $type == all {
		// Shares the backgrounds
		@extend %sprite;
	}

	$icon-map: icon-attr($icon);

	// Outputs dimensions in em
	@if $type == all or $type == size {
		width: mq-px2em(map-get($icon-map, width) + 1);
		height: mq-px2em(map-get($icon-map, height) + 1);
	}

	// Outputs background position in em
	@if $type == all or $type == bg {
		//background-position: mq-px2em(map-get($icon-map, x)) mq-px2em(map-get($icon-map, y));
		background-position: (mq-px2em(map-get($icon-map, x)) - mq-px2em(map-get($icon-map, padL)))(mq-px2em(map-get($icon-map, y)) - mq-px2em(map-get($icon-map, padT)));
	}

	// Add ie fallback
	@include ie-sprite($icon, $type);

}
